generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(STAFF)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedTasks Task[]
  appointments  Appointment[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Customer {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String   @default("US")
  dateOfBirth DateTime?
  notes       String?
  tags        String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]

  @@map("customers")
}

model Appointment {
  id          String            @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  employeeId String
  employee   User @relation(fields: [employeeId], references: [id])
  
  serviceId  String?
  service    Service? @relation(fields: [serviceId], references: [id])
  
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  @@map("appointments")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  assigneeId String?
  assignee   User? @relation(fields: [assigneeId], references: [id])

  @@map("tasks")
}

model Location {
  id          String  @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  country     String  @default("US")
  phone       String?
  email       String?
  isActive    Boolean @default(true)
  mapUrl      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]
  services     Service[]

  @@map("locations")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // Duration in minutes
  price       Decimal
  isActive    Boolean  @default(true)
  categoryId  String?
  category    ServiceCategory? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]
  locationId   String?
  location     Location? @relation(fields: [locationId], references: [id])

  @@map("services")
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  services Service[]

  @@map("service_categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String?  @unique
  price       Decimal
  cost        Decimal?
  stockQty    Int      @default(0)
  isActive    Boolean  @default(true)
  categoryId  String?
  category    ProductCategory? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("product_categories")
}

model CompanySettings {
  id          String   @id @default(cuid())
  companyName String
  email       String
  phone       String?
  address     String?
  timezone    String   @default("UTC")
  currency    String   @default("USD")
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("company_settings")
}

model AuditLog {
  id        String     @id @default(cuid())
  action    AuditAction
  resource  String     // Table/resource name
  resourceId String?   // ID of the affected resource
  details   Json?      // Additional details about the action
  ipAddress String?
  userAgent String?
  createdAt DateTime   @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
}